package corpcorp_weatherapp;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import com.itextpdf.text.Document;
import com.itextpdf.text.Paragraph; 
import com.itextpdf.text.pdf.PdfWriter; 
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import java.time.LocalDate;
import java.sql.Time;
import java.text.DecimalFormat;

/**
 *
 * @author ricardo
 */
public class Clima_Servidor extends javax.swing.JFrame {
    private int user = 0;
    private int id_user = 0;
    private String coordenadas = "";
    private int fkCiudad;
    private double temp = 0;
    private double pres = 0;
    private double preci = 0;
    private double viento = 0;
    
    private int flagBtn = 0;
    
    private JFreeChart chartTemp;
    private JFreeChart chartViento;
    private DatosGrafica datosGrafica;
        
    private String fechaClima;
    /**
     * Creates new form Clima_Servidor
     */
    public Clima_Servidor() {
        initComponents();
    }
    
    public Clima_Servidor(int user) {
        initComponents();
        this.user = user;
        
        id_user = user;
        
        Clima_Servidor usuario = new Clima_Servidor();
        UbicacionDatos datos = usuario.obtenerCoordenadas(user);
        coordenadas = datos.getUbicacion();
        fkCiudad = datos.getidCiudad();
        
        lblName.setText("Bienvenido, "+datos.getNombre());
        lblUbication.setText("Su ubicación actual es:"+datos.getCiudad()+","+datos.getPais());
        
        
        System.out.println("pk_id_user: " + user);
        
        setLocationRelativeTo(null);
        setResizable(false);
    }
    
    private static class DatosClima {
        private double temperatura;
        private double precipitacion;
        private double presion;
        private double velocidad_viento;
        private byte[] archivoPDF;

        public double getTemperatura() {
            return temperatura;
        }

        public void setTemperatura(double temperatura) {
            this.temperatura = temperatura;
        }

        public double getPrecipitacion() {
            return precipitacion;
        }

        public void setPrecipitacion(double precipitacion) {
            this.precipitacion = precipitacion;
        }

        public double getPresion() {
            return presion;
        }

        public void setPresion(double presion) {
            this.presion = presion;
        }

        public double getVelocidad_viento() {
            return velocidad_viento;
        }

        public void setVelocidad_viento(double velocidad_viento) {
            this.velocidad_viento = velocidad_viento;
        }
        
        public byte[] getArchivoPDF() {
            return archivoPDF;
        }

        public void setArchivoPDF(byte[] archivoPDF) {
            this.archivoPDF = archivoPDF;
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupDia = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        chxTemperatura = new javax.swing.JCheckBox();
        chxPresion = new javax.swing.JCheckBox();
        chxPrecipitacion = new javax.swing.JCheckBox();
        btnAceptarDefault = new javax.swing.JButton();
        chxVelocidadViento = new javax.swing.JCheckBox();
        rndToday = new javax.swing.JRadioButton();
        rndTomorrow = new javax.swing.JRadioButton();
        rndYesterday = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        btnPDF = new javax.swing.JButton();
        btnEstadistica = new javax.swing.JButton();
        panelClima = new javax.swing.JPanel();
        lblImagenClima = new javax.swing.JLabel();
        lblTemperatura = new javax.swing.JLabel();
        lblPresion = new javax.swing.JLabel();
        lblPrecipitacion = new javax.swing.JLabel();
        lblViento = new javax.swing.JLabel();
        lblDescTemp = new javax.swing.JLabel();
        lblUbication = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chxTemperatura.setText("Temperatura");

        chxPresion.setText("Presion");

        chxPrecipitacion.setText("Precipitación en la ultima hora");
        chxPrecipitacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chxPrecipitacionActionPerformed(evt);
            }
        });

        btnAceptarDefault.setText("Aceptar");
        btnAceptarDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarDefaultActionPerformed(evt);
            }
        });

        chxVelocidadViento.setText("Velocidad del viento");

        btnGroupDia.add(rndToday);
        rndToday.setText("Hoy");

        btnGroupDia.add(rndTomorrow);
        rndTomorrow.setText("Mañana");

        btnGroupDia.add(rndYesterday);
        rndYesterday.setText("Ayer");

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        jLabel1.setText("Consultar Clima");

        jLabel2.setText("Seleccione un dia");

        jLabel3.setText("Seleccione alguno de los parametros");

        btnPDF.setText("Generar PDF");
        btnPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPDFActionPerformed(evt);
            }
        });

        btnEstadistica.setText("Generar Estadisticas");
        btnEstadistica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEstadisticaActionPerformed(evt);
            }
        });

        lblTemperatura.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N

        lblPresion.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N

        lblPrecipitacion.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N

        lblViento.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N

        lblDescTemp.setFont(new java.awt.Font("Helvetica Neue", 0, 11)); // NOI18N

        javax.swing.GroupLayout panelClimaLayout = new javax.swing.GroupLayout(panelClima);
        panelClima.setLayout(panelClimaLayout);
        panelClimaLayout.setHorizontalGroup(
            panelClimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelClimaLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(lblImagenClima, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelClimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelClimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblTemperatura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblPresion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblPrecipitacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblViento, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblDescTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        panelClimaLayout.setVerticalGroup(
            panelClimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelClimaLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lblDescTemp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelClimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblImagenClima, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTemperatura, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPresion, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(lblPrecipitacion, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblViento, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 95, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rndYesterday)
                    .addComponent(rndTomorrow)
                    .addComponent(jLabel2)
                    .addComponent(rndToday)
                    .addComponent(chxVelocidadViento)
                    .addComponent(chxPrecipitacion)
                    .addComponent(chxPresion)
                    .addComponent(jLabel3)
                    .addComponent(chxTemperatura)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                        .addComponent(lblUbication, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(panelClima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAceptarDefault, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnPDF)
                        .addGap(44, 44, 44)
                        .addComponent(btnEstadistica)))
                .addGap(134, 134, 134))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel1)
                        .addGap(27, 27, 27)
                        .addComponent(panelClima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(64, Short.MAX_VALUE)
                        .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblUbication, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rndToday)
                        .addGap(8, 8, 8)
                        .addComponent(rndTomorrow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rndYesterday)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chxTemperatura)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chxPresion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chxPrecipitacion)
                        .addGap(11, 11, 11)
                        .addComponent(chxVelocidadViento)
                        .addGap(99, 99, 99)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAceptarDefault, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEstadistica, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAceptarDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarDefaultActionPerformed
        // TODO add your handling code here:
        //System.out.println("fk_id_ciudad: " +  fkCiudad);
        DatosClima datosClima = new DatosClima();
        
        List<String> parametros = new ArrayList<>();
        
        lblImagenClima.setVisible(false);

        String day = "";
        if(rndToday.isSelected()){
            day = "now";
        }else if(rndTomorrow.isSelected()){
            day = "tomorrowT12:00:00.000Z";
        }else if(rndYesterday.isSelected()){
            day = "yesterdayT12:00:00.000Z";
        }
        
        
        if(chxTemperatura.isSelected()){
            parametros.add("t_2m:C");
            lblImagenClima.setVisible(true);
        }
        
        if(chxPresion.isSelected()){
            parametros.add("msl_pressure:hPa");
        }
        
        if(chxPrecipitacion.isSelected()){
            parametros.add("precip_1h:mm");
        }
        
        if(chxVelocidadViento.isSelected()){
            parametros.add("wind_speed_10m:ms");
        }
        
        
        
        //Si algun parametro fue seleccionado manda la solictud de API
        if((rndToday.isSelected() || rndTomorrow.isSelected() || rndYesterday.isSelected())
                && (chxTemperatura.isSelected() || chxPresion.isSelected() || chxPrecipitacion.isSelected()
                || chxVelocidadViento.isSelected())){
                
                //Proceso de API
                try{
                String username = "corpcorp_ramos_ricardo";
                String password = "0F7Db5uQuH";
                String apiUrl = "https://api.meteomatics.com/";


                String ubicacion = coordenadas;
                String formato = "json";

                // Construir la url
                StringBuilder urlBuilder = new StringBuilder(apiUrl);

                 urlBuilder.append(day).append("/");

                for (int i = 0; i < parametros.size(); i++) {
                    urlBuilder.append(parametros.get(i));
                    if (i < parametros.size() - 1) {
                        urlBuilder.append(",");
                    }
                }
                urlBuilder.append("/").append(ubicacion).append("/").append(formato);

                String auth = username + ":" + password;
                String encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes(StandardCharsets.UTF_8));

                //Se crea la petición http
                HttpRequest request = HttpRequest.newBuilder()
                        .uri(URI.create(urlBuilder.toString()))
                        .header("Authorization", "Basic " + encodedAuth)
                        .build();

                System.out.println("request: "+request);

                //Se obtiene el resultado de la peticion
                HttpClient usuario = HttpClient.newHttpClient();
                HttpResponse<String> response = usuario.send(request, HttpResponse.BodyHandlers.ofString());


                JSONObject json = new JSONObject(response.body());

                boolean selectTemp = chxTemperatura.isSelected();
                boolean selectPresion = chxPresion.isSelected();
                boolean selectPreci = chxPrecipitacion.isSelected();
                boolean selectViento = chxVelocidadViento.isSelected();

                //Obtener datos del request de la API
                obtenerDatos(json, selectTemp, selectPresion, selectPreci, selectViento, datosClima);
                
                
                flagBtn = 1;

            }catch(IOException | InterruptedException | JSONException e){
                e.printStackTrace();
            }
        
            
        }else{
            JOptionPane.showMessageDialog(null, "Favor de seleccionar un dia y algun parametro para el clima");
            return;
        }
    }//GEN-LAST:event_btnAceptarDefaultActionPerformed


    
    //StringBuilder
    private void obtenerDatos(JSONObject json, boolean cboxTemp, boolean cboxPresion, boolean cboxPrecipi, boolean cboxViento,DatosClima datosClima) {
        //Inicializar las variables del clima
        temp = 0;
        pres = 0;
        preci = 0;
        viento = 0;
        
        DecimalFormat df = new DecimalFormat("#.00");
        String vientoFormat;
        Double vientoRedondeado;
        
        lblDescTemp.setText("");
        lblTemperatura.setText("");
        lblPrecipitacion.setText("");
        lblPresion.setText("");
        lblViento.setText("");

        JSONArray data = json.getJSONArray("data");
        for (int i = 0; i < data.length(); i++) {
            JSONObject dataPoint = data.getJSONObject(i);
            String parameter = dataPoint.getString("parameter");

            if (null != parameter) switch (parameter) {
                case "t_2m:C" -> datosClima.setTemperatura(dataPoint.getJSONArray("coordinates")
                            .getJSONObject(0)
                            .getJSONArray("dates")
                            .getJSONObject(0)
                            .getDouble("value"));
                case "precip_1h:mm" -> datosClima.setPrecipitacion(dataPoint.getJSONArray("coordinates")
                            .getJSONObject(0)
                            .getJSONArray("dates")
                            .getJSONObject(0)
                            .getDouble("value"));
                case "msl_pressure:hPa" -> datosClima.setPresion(dataPoint.getJSONArray("coordinates")
                            .getJSONObject(0)
                            .getJSONArray("dates")
                            .getJSONObject(0)
                            .getDouble("value"));
                case "wind_speed_10m:ms" -> datosClima.setVelocidad_viento(dataPoint.getJSONArray("coordinates")
                            .getJSONObject(0)
                            .getJSONArray("dates")
                            .getJSONObject(0)
                            .getDouble("value"));
                default -> {
                    break;
                }
            }
            // Extraer y establecer la fecha del JSON 
            String dateString = dataPoint.getJSONArray("coordinates") 
                    .getJSONObject(0) 
                    .getJSONArray("dates") 
                    .getJSONObject(0) 
                    .getString("date"); 

            if (dateString != null && !dateString.isEmpty()) { 
                LocalDate localDate = LocalDate.parse(dateString.split("T")[0]);
                Date fechaUtil = java.sql.Date.valueOf(localDate);
                fechaClima = fechaUtil.toString();
                System.out.println("Fecha obtenida y asignada: " + fechaUtil.toString());
            } else { 
                System.err.println("Error: Fecha no encontrada en el JSON"); 
            }
        }
        
        if(cboxTemp){
            lblImagenClima.setIcon(escalarImagen(imagenWeather(datosClima.getTemperatura())));
            lblTemperatura.setText("Temperatura: "+datosClima.getTemperatura()+" °C");
            lblDescTemp.setText(descripcionClima(datosClima.getTemperatura())+"\n\n");
            temp = datosClima.getTemperatura();
        }
        
        if (cboxPresion) {
            lblPresion.setText("Presion: "+datosClima.getPresion()+" hPa\n\n");
            pres = datosClima.getPresion();
        }

        if (cboxPrecipi) {
            lblPrecipitacion.setText("Presion: "+datosClima.getPrecipitacion()+"mm\n\n");
            preci = datosClima.getPrecipitacion();
        }

        if (cboxViento) {
            double veintoSin = datosClima.getVelocidad_viento()*3.6;
            vientoFormat = df.format(veintoSin);
            vientoRedondeado = Double.parseDouble(vientoFormat);
            lblViento.setText("Viento: "+vientoRedondeado+"km/h\n\n");
            viento = vientoRedondeado;
        } 
    }
    
    //Descripción dependiendo de la temepratura
    private static String descripcionClima(double valor) { 
        if (valor < 0) { 
            return "Muy Frio"; 
        } else if (valor >= 0 && valor <= 10){ 
            return "Frio"; 
        } else if(valor >= 10 && valor <= 20){ 
            return "Templado"; 
        }else if(valor >= 20 && valor <= 25){
            return "Soleado";
        }else{
            return "Caluroso";
        }
    }
    //Imagen dependiendo de la temperatura
    private ImageIcon imagenWeather(double valor) { 
        String path; 
        if (valor < 0) { 
            path = "/Users/ricardo/NetBeansProjects/CorpCorp_WeatherApp/IMGClima/muyfrio.png"; 
        } else if (valor >= 0 && valor <= 10){ 
            path = "/Users/ricardo/NetBeansProjects/CorpCorp_WeatherApp/IMGClima/frio.png"; 
        } else if(valor >= 10 && valor <= 20){ 
            path = "/Users/ricardo/NetBeansProjects/CorpCorp_WeatherApp/IMGClima/templado.png"; 
        }else if(valor >= 20 && valor <= 25){
            path = "/Users/ricardo/NetBeansProjects/CorpCorp_WeatherApp/IMGClima/soleado.png";
        }else{
            path = "/Users/ricardo/NetBeansProjects/CorpCorp_WeatherApp/IMGClima/caluroso.png";
        }
        return new ImageIcon(path); 
    }
    
   private ImageIcon escalarImagen(ImageIcon icon) { 
       Image img = icon.getImage(); 
       Image imagenEsc = img.getScaledInstance(32, 32, Image.SCALE_SMOOTH); 
       return new ImageIcon(imagenEsc); 
   }
    
    private UbicacionDatos obtenerCoordenadas (int usuario){
        
        String ubicacion = "";
        String nombre = "";
        String ciudad = "";
        String pais = "";
        int idCiudad = 0;
        
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");

            String url = "jdbc:mysql://localhost:3306/CORPCORP_APP";
            String user = "root";
            String password = "root";

            java.sql.Connection conn = DriverManager.getConnection(url, user, password);
            
            String query = "SELECT U.nombre,C.ubicacion,C.nombre_ciudad,P.nombre_pais,C.pk_id_ciudad "
                    + "FROM tbl_ciudades C,tbl_paises P,tbl_usuarios U " 
                    + "WHERE U.pk_id_usuario = ? "
                    + "AND C.fk_id_pais = P.pk_id_pais "
                    + "AND U.fk_id_ciudad = C.pk_id_ciudad";
            
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, usuario);
            ResultSet rs = stmt.executeQuery();
            
            if(rs.next()){
                //Se encontro la ciudad
                nombre = rs.getString("nombre");
                ubicacion = rs.getString("ubicacion");
                ciudad = rs.getString("nombre_ciudad");
                pais = rs.getString("nombre_pais");
                idCiudad = rs.getInt("pk_id_ciudad");
            }else{
                //Registro no encontrado
            }

            rs.close();
            stmt.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
        return new UbicacionDatos(nombre, ubicacion, ciudad, pais,idCiudad);
    }
    
    private void chxPrecipitacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chxPrecipitacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chxPrecipitacionActionPerformed

    //Boton para generar TextArea
    private void btnPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPDFActionPerformed
        // TODO add your handling code here:    
        DatosClima datosClima = new DatosClima();
        
        
        datosClima.setTemperatura(0);
        datosClima.setPresion(0);
        datosClima.setPrecipitacion(0);
        datosClima.setVelocidad_viento(0);
        datosClima.setArchivoPDF(new byte[0]);
        
        if(flagBtn == 1){
            String mensaje = "Al generar el PDF se guardaran tus preferencias, ¿Deseas generar el PDF?";
            String confirmacion = "Confirmación";
            
            //Opciones
            String[] options = {"Aceptar", "Cancelar"};
            
            int respuesta = JOptionPane.showOptionDialog( null, mensaje, confirmacion, JOptionPane.DEFAULT_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
            
            //int respuesta = JOptionPane.showConfirmDialog(this, "Al generar el PDF se guardaran tus preferencias, ¿Deseas generar el PDF?","Aceptar",JOptionPane.YES_NO_OPTION);
            
            if (respuesta == 0) { 
                generarPDF(lblTemperatura,lblPresion,lblPrecipitacion,lblViento,datosClima);
                
                insertPreferences(datosClima);

            } else { 
                JOptionPane.showMessageDialog(this, "Error: Datos no generados", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Error: Primero debe consultar el clima", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnPDFActionPerformed

    //Función generar PDF con los datos de los JLabel
    private void generarPDF(JLabel temperatura,JLabel presion, JLabel precipitacion ,JLabel viento,DatosClima datos) { 
        Document document = new Document();
        try { 
            //Format    o de Fecha y Hora
            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy_HH-mm-ss");
            //Fecha y Hora actual del sistema
            Date date = new Date();
            String filePath = "/Users/ricardo/NetBeansProjects/CorpCorp_WeatherApp/ReportesPDF/Reporte_" +dateFormat.format(date)+ ".pdf";
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(filePath));
            
            document.open(); 
            document.add(new Paragraph(temperatura.getText()));
            document.add(new Paragraph(presion.getText()));
            document.add(new Paragraph(precipitacion.getText()));
            document.add(new Paragraph(viento.getText()));
            document.add(new Paragraph("Gráfica de Temperatura y Grafica de Velocidad")); 
            
            //Insertar graficas al PDF
            if(chartTemp != null || chartViento != null){
                BufferedImage bufferedImageTemp = chartTemp.createBufferedImage(500, 300); 
                ByteArrayOutputStream baosTemp = new ByteArrayOutputStream();
                ChartUtilities.writeBufferedImageAsPNG(baosTemp, bufferedImageTemp); 
                com.itextpdf.text.Image imageTemp = com.itextpdf.text.Image.getInstance(baosTemp.toByteArray());
                document.add(imageTemp); 
                
                BufferedImage bufferedImageViento = chartViento.createBufferedImage(500, 300); 
                ByteArrayOutputStream baosViento = new ByteArrayOutputStream();
                ChartUtilities.writeBufferedImageAsPNG(baosViento, bufferedImageViento); 
                com.itextpdf.text.Image imageViento = com.itextpdf.text.Image.getInstance(baosViento.toByteArray());
                document.add(imageViento); 
            }else{
                System.err.println("Error: Las gráficas no se pudieron crear.");
            }
    
            document.close();
            writer.close(); 
            
            
            File filePDF = new File(filePath); 
            byte[] pdfData = new byte[(int) filePDF.length()]; 
            FileInputStream fis = new FileInputStream(filePDF); 
            //Leer PDF
            fis.read(pdfData); 
            fis.close(); 
            //Guarda el PDF en la clase Datos Clima
            datos.setArchivoPDF(pdfData);
            
            System.out.println("PDF generado exitosamente.");
            JOptionPane.showMessageDialog(null, "PDF Generado Exitosamente");
            
        } catch (Exception e) { 
            e.printStackTrace(); 
        } 
    }
    
    private void btnEstadisticaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEstadisticaActionPerformed
        
        if(flagBtn ==1){
            datosGrafica = solicitudGrafica();
        }else{
            JOptionPane.showMessageDialog(null, "Error: Primero debe consultar el clima", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        if (datosGrafica != null) { 
            Graficas graficaFrame = new Graficas(datosGrafica); 
            graficaFrame.setVisible(true); 
            chartTemp = graficaFrame.getChartTemp();
            chartViento = graficaFrame.getChartViento();
        }
    }//GEN-LAST:event_btnEstadisticaActionPerformed

    private DatosGrafica solicitudGrafica(){
        List<String> parametrosGra = new ArrayList<>(); 
        //https://api.meteomatics.com/yesterdayT00:00:00.000Z--todayT00:00:00.000Z/t_2m:C/53.55073,9.99302/json
        String ubicacionGra = coordenadas; 
        // Reemplaza esto con tus coordenadas 
        String dayGra = "";
        if(rndToday.isSelected()){
            dayGra = "todayT00:00:00.000Z--tomorrowT12:00:00.000Z";
        }else if(rndTomorrow.isSelected()){
            dayGra = "tomorrowT00:00:00.000Z--tomorrow+1DT00:00:00.000Z";
        }else if(rndYesterday.isSelected()){
            dayGra = "yesterdayT00:00:00.000Z--todayT00:00:00.000Z";
        }
        
        if(chxTemperatura.isSelected()){
            parametrosGra.add("t_2m:C");       
        }
        
        if(chxVelocidadViento.isSelected()){
            parametrosGra.add("wind_speed_10m:ms");
        }
        
        try { 
            String username = "corpcorp_ramos_ricardo";
            String password = "0F7Db5uQuH"; 
            String apiUrl = "https://api.meteomatics.com/"; 
            StringBuilder urlBuilder = new StringBuilder(apiUrl); 
            urlBuilder.append(dayGra).append("/"); 
            
        for (int i = 0; i < parametrosGra.size(); i++) { 
            urlBuilder.append(parametrosGra.get(i)); 
            if (i < parametrosGra.size() - 1) { 
                urlBuilder.append(","); 
            } 
        } 
        
        urlBuilder.append("/").append(ubicacionGra).append("/json"); 
        String auth = username + ":" + password; 
        String encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes(StandardCharsets.UTF_8)); 
        
        HttpRequest request = HttpRequest.newBuilder() 
                .uri(URI.create(urlBuilder.toString())) 
                .header("Authorization", "Basic " + encodedAuth) 
                .build(); 
        
        HttpClient client = HttpClient.newHttpClient(); 
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
        
        JSONObject json = new JSONObject(response.body());
        
        return obtenerDatosGrafica(json); 
        
        } catch (IOException | InterruptedException e) {
            e.printStackTrace(); 
            
        }
        return null;
    }
    
     //Funcion obtener datos para grafica
    private static DatosGrafica obtenerDatosGrafica(JSONObject json) {
        DatosGrafica datosClima = new DatosGrafica();

        JSONArray data = json.getJSONArray("data");
        for (int i = 0; i < data.length(); i++) {
            JSONObject dataPoint = data.getJSONObject(i);
            String parameter = dataPoint.getString("parameter");

            if ("t_2m:C".equals(parameter) || "wind_speed_10m:ms".equals(parameter)) {
                JSONArray coordenadas = dataPoint.getJSONArray("coordinates");
                for (int j = 0; j < coordenadas.length(); j++) { 
                    JSONArray dates = coordenadas.getJSONObject(j).getJSONArray("dates"); 
                    for (int k = 0; k < dates.length(); k++) { 
                        JSONObject datePoint = dates.getJSONObject(k); 
                        if ("t_2m:C".equals(parameter)) { 
                            datosClima.temperaturas.add(new DatosGrafica.DatosTemp(datePoint.getString("date"), datePoint.getDouble("value"))); 
                        } else if ("wind_speed_10m:ms".equals(parameter)) {
                            datosClima.viento.add(new DatosGrafica.DatosTemp(datePoint.getString("date"), datePoint.getDouble("value"))); 
                        }
                    } 
                }                                  
            } 
        }     

       return datosClima;
    }
    
    private void insertPreferences(DatosClima datosClima){
        //Fecha y Hora actual del sistema
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        
        // Fecha y Hora actual del sistema 
        Date fecha = new Date(); 
        Date hora = new Date();
       
        String sqlFechaPDF = dateFormat.format(fecha); 
        Time sqlHoraPDF = new Time(hora.getTime());
        
        System.out.println("Fecha JSON: "+fechaClima);
        
        try {
            // Cargar el driver JDBC para MySQL
            Class.forName("com.mysql.cj.jdbc.Driver");

            String url = "jdbc:mysql://localhost:3306/CORPCORP_APP";
            String user = "root";
            String password = "root";

            java.sql.Connection conn = DriverManager.getConnection(url, user, password);
            
            String sql = "INSERT INTO tbl_preferencias_clima (FK_ID_Usuario, FK_ID_Ciudad,Fecha_Clima,Temperatura,"
                    + "Presion,Precipitacion,Velocidad_Viento,Archivo_PDF,Fecha_PDF,Hora_PDF) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            
            PreparedStatement stmt = conn.prepareStatement(sql);
            
            stmt.setInt(1, id_user);
            stmt.setInt(2, fkCiudad);
            stmt.setString(3, fechaClima);
            stmt.setDouble(4, temp);
            stmt.setDouble(5, pres);
            stmt.setDouble(6, preci);
            stmt.setDouble(7, viento);
            stmt.setBytes(8, datosClima.getArchivoPDF());
            stmt.setString(9, sqlFechaPDF);
            stmt.setTime(10, sqlHoraPDF);
            

            int rowsInserted = stmt.executeUpdate();
            
            JOptionPane.showMessageDialog(this, "Preferencias Guardadas Correctamente");            
            
            System.out.println("Filas insertadas: " + rowsInserted);

            stmt.close();
            conn.close();
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Clima_Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Clima_Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Clima_Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Clima_Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Clima_Servidor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptarDefault;
    private javax.swing.JButton btnEstadistica;
    private javax.swing.ButtonGroup btnGroupDia;
    private javax.swing.JButton btnPDF;
    private javax.swing.JCheckBox chxPrecipitacion;
    private javax.swing.JCheckBox chxPresion;
    private javax.swing.JCheckBox chxTemperatura;
    private javax.swing.JCheckBox chxVelocidadViento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblDescTemp;
    private javax.swing.JLabel lblImagenClima;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPrecipitacion;
    private javax.swing.JLabel lblPresion;
    private javax.swing.JLabel lblTemperatura;
    private javax.swing.JLabel lblUbication;
    private javax.swing.JLabel lblViento;
    private javax.swing.JPanel panelClima;
    private javax.swing.JRadioButton rndToday;
    private javax.swing.JRadioButton rndTomorrow;
    private javax.swing.JRadioButton rndYesterday;
    // End of variables declaration//GEN-END:variables
}
